'use client';

import { useState } from 'react';
import { activityLogger } from '@/lib/services/activityLogger';
import { useAIRateLimit } from '@/hooks/useAIRateLimit';
import { useToast } from '@/components/ui/Toast';

interface ComposeData {
  title: string;
  content: string;
  channels: string[];
  scheduleAt: string;
  mediaUrls: string[];
  postId?: string;
  metadata?: {
    type?: 'social' | 'video';
    platform: string;
    ratio: string;
    hashtags?: string;
    cta?: string;
    brandColor?: string;
    template?: string;
    duration?: number;
    hook?: string;
    beats?: { time: number; text: string; }[];
    sub?: string;
    overlayCTA?: string;
  };
}

interface ComposeLeftPanelProps {
  activeTab: 'social' | 'video';
  onTabChange: (tab: 'social' | 'video') => void;
  composeData: Partial<ComposeData>;
  onDataChange: (data: Partial<ComposeData>) => void;
}

const templates = [
  {
    id: 'flash-promo',
    name: 'Flash Promo',
    description: 'Khuy·∫øn m√£i nhanh',
    ratio: '1:1',
    content: 'üî• FLASH SALE 50% üî•\n\nCh·ªâ c√≤n 24h cu·ªëi c√πng!\nMua ngay t·∫°i: [link]\n\n#flashsale #khuyenmai #sale50'
  },
  {
    id: 'product-launch',
    name: 'Product Launch',
    description: 'Ra m·∫Øt s·∫£n ph·∫©m',
    ratio: '4:5',
    content: 'üöÄ RA M·∫ÆT S·∫¢N PH·∫®M M·ªöI!\n\nTr·∫£i nghi·ªám ngay h√¥m nay\nƒê·∫∑t h√†ng: [link]\n\n#newproduct #launch #innovation'
  },
  {
    id: 'testimonial',
    name: 'Testimonial',
    description: 'Ph·∫£n h·ªìi kh√°ch h√†ng',
    ratio: '9:16',
    content: '‚≠ê KH√ÅCH H√ÄNG N√ìI G√å V·ªÄ CH√öNG T√îI\n\n"S·∫£n ph·∫©m tuy·ªát v·ªùi!"\n- Anh/Ch·ªã [T√™n]\n\n#testimonial #review #feedback'
  },
  {
    id: 'tips',
    name: 'Tips & Tricks',
    description: 'M·∫πo hay',
    ratio: '1:1',
    content: 'üí° M·∫∏O HAY H√îM NAY\n\n5 c√°ch ƒë·ªÉ...\n1. [M·∫πo 1]\n2. [M·∫πo 2]\n3. [M·∫πo 3]\n\n#tips #tricks #helpful'
  }
];

const videoTemplates = [
  {
    id: 'product-demo',
    name: 'Gi·ªõi thi·ªáu s·∫£n ph·∫©m',
    description: 'Demo t√≠nh nƒÉng s·∫£n ph·∫©m',
    ratio: '9:16',
    duration: 30,
    hook: 'B·∫°n c√≥ bi·∫øt r·∫±ng...',
    content: 'Gi·ªõi thi·ªáu t√≠nh nƒÉng n·ªïi b·∫≠t c·ªßa s·∫£n ph·∫©m trong 30 gi√¢y',
    beats: [
      { time: 0, text: 'Hook: Thu h√∫t s·ª± ch√∫ √Ω' },
      { time: 5, text: 'V·∫•n ƒë·ªÅ: Kh√°ch h√†ng g·∫∑p ph·∫£i' },
      { time: 15, text: 'Gi·∫£i ph√°p: S·∫£n ph·∫©m gi·∫£i quy·∫øt' },
      { time: 25, text: 'CTA: K√™u g·ªçi h√†nh ƒë·ªông' }
    ]
  },
  {
    id: 'behind-scenes',
    name: 'H·∫≠u tr∆∞·ªùng',
    description: 'Quy tr√¨nh l√†m vi·ªác',
    ratio: '9:16', 
    duration: 45,
    hook: 'B·∫°n c√≥ bao gi·ªù t·ª± h·ªèi...',
    content: 'Kh√°m ph√° quy tr√¨nh l√†m vi·ªác, vƒÉn h√≥a c√¥ng ty',
    beats: [
      { time: 0, text: 'M·ªü ƒë·∫ßu: Gi·ªõi thi·ªáu ch·ªß ƒë·ªÅ' },
      { time: 10, text: 'Quy tr√¨nh: Th·ª±c t·∫ø l√†m vi·ªác' },
      { time: 30, text: 'Insight: Th√¥ng tin th√∫ v·ªã' },
      { time: 40, text: 'K·∫øt th√∫c: ·∫§n t∆∞·ª£ng cu·ªëi' }
    ]
  },
  {
    id: 'tutorial',
    name: 'H∆∞·ªõng d·∫´n',
    description: 'Tutorial t·ª´ng b∆∞·ªõc',
    ratio: '9:16',
    duration: 60,
    hook: 'H·ªçc c√°ch...',
    content: 'H∆∞·ªõng d·∫´n t·ª´ng b∆∞·ªõc c√°ch s·ª≠ d·ª•ng s·∫£n ph·∫©m/d·ªãch v·ª•',
    beats: [
      { time: 0, text: 'Gi·ªõi thi·ªáu: B√†i h·ªçc h√¥m nay' },
      { time: 10, text: 'B∆∞·ªõc 1: Chu·∫©n b·ªã' },
      { time: 25, text: 'B∆∞·ªõc 2: Th·ª±c hi·ªán' },
      { time: 40, text: 'B∆∞·ªõc 3: Ho√†n thi·ªán' },
      { time: 55, text: 'T√≥m t·∫Øt: K·∫øt qu·∫£ & CTA' }
    ]
  },
  {
    id: 'user-generated',
    name: 'N·ªôi dung ng∆∞·ªùi d√πng',
    description: 'Tr·∫£i nghi·ªám kh√°ch h√†ng',
    ratio: '9:16',
    duration: 30,
    hook: 'Kh√°ch h√†ng n√≥i g√¨ v·ªÅ ch√∫ng t√¥i...',
    content: 'Chia s·∫ª tr·∫£i nghi·ªám th·ª±c t·∫ø t·ª´ kh√°ch h√†ng',
    beats: [
      { time: 0, text: 'Gi·ªõi thi·ªáu: Kh√°ch h√†ng' },
      { time: 8, text: 'C√¢u chuy·ªán: Tr·∫£i nghi·ªám' },
      { time: 20, text: 'K·∫øt qu·∫£: Th√†nh c√¥ng ƒë·∫°t ƒë∆∞·ª£c' },
      { time: 27, text: 'CTA: Th·ª≠ ngay h√¥m nay' }
    ]
  },
  {
    id: 'trending-topic',
    name: 'Xu h∆∞·ªõng hot',
    description: 'K·∫øt h·ª£p trend hi·ªán t·∫°i',
    ratio: '9:16',
    duration: 20,
    hook: 'Trend m·ªõi nh·∫•t...',
    content: 'K·∫øt h·ª£p th∆∞∆°ng hi·ªáu v·ªõi xu h∆∞·ªõng hi·ªán t·∫°i',
    beats: [
      { time: 0, text: 'Trend: Xu h∆∞·ªõng hot' },
      { time: 7, text: 'K·∫øt n·ªëi: Li√™n quan th∆∞∆°ng hi·ªáu' },
      { time: 15, text: 'H√†nh ƒë·ªông: T∆∞∆°ng t√°c ngay' }
    ]
  }
];

const platforms = [
  { key: 'facebook', label: 'Facebook Page', icon: 'üìò', available: true },
  { key: 'instagram', label: 'Instagram', icon: 'üì∑', available: true },
  { key: 'zalo', label: 'Zalo OA', icon: 'üí¨', available: true }
];

const ratios = [
  { key: '1:1', label: '1:1 (Vu√¥ng)', description: 'T·ªâ l·ªá vu√¥ng (Instagram, Facebook)' },
  { key: '4:5', label: '4:5 (D·ªçc)', description: 'T·ªâ l·ªá d·ªçc (Instagram Feed)' },
  { key: '9:16', label: '9:16 (Story)', description: 'T·ªâ l·ªá Story (Instagram, Facebook)' },
  { key: '16:9', label: '16:9 (Ngang)', description: 'T·ªâ l·ªá ngang (Facebook, YouTube)' }
];

const videoRatios = [
  { key: '9:16', label: '9:16 (D·ªçc)', description: 'D·ªçc - TikTok, Instagram Reels, YouTube Shorts' },
  { key: '16:9', label: '16:9 (Ngang)', description: 'Ngang - YouTube, Facebook Video' },
  { key: '1:1', label: '1:1 (Vu√¥ng)', description: 'Vu√¥ng - Instagram, Facebook Feed' },
  { key: '4:5', label: '4:5 (D·ªçc nh·∫π)', description: 'D·ªçc nh·∫π - Instagram Feed t·ªëi ∆∞u' }
];

export default function ComposeLeftPanel({
  activeTab,
  onTabChange,
  composeData,
  onDataChange
}: ComposeLeftPanelProps) {
  const [selectedTemplate, setSelectedTemplate] = useState<string | null>(null);
  const [aiLoading, setAiLoading] = useState<{
    caption: boolean;
    hashtags: boolean;
    script: boolean;
    hook: boolean;
    timeline: boolean;
  }>({
    caption: false,
    hashtags: false,
    script: false,
    hook: false,
    timeline: false
  });
  const { rateLimitData, canUseAI, getAILimitMessage } = useAIRateLimit();
  const { showToast } = useToast();

  // Debug logs on every render
  console.log('üîç ComposeLeftPanel render - canUseAI:', canUseAI(), 'rateLimitData:', rateLimitData, 'aiLoading:', aiLoading);

  const handleAIAction = async (action: 'caption' | 'hashtags' | 'script' | 'hook' | 'timeline') => {
    console.log('üöÄ Starting AI action:', action, 'Current loading state:', aiLoading);
    
    // Check AI rate limit first
    if (!canUseAI()) {
      showToast({
        message: getAILimitMessage() || 'B·∫°n ƒë√£ v∆∞·ª£t qu√° gi·ªõi h·∫°n s·ª≠ d·ª•ng AI. Vui l√≤ng n√¢ng c·∫•p t√†i kho·∫£n.',
        type: 'warning',
        title: 'Gi·ªõi h·∫°n AI'
      });
      return;
    }

    // Set loading state for this action
    console.log('‚è≥ Setting loading state for action:', action);
    setAiLoading(prev => {
      const newState = { ...prev, [action]: true };
      console.log('üìä New loading state:', newState);
      return newState;
    });
    
    const startTime = Date.now();
    
    try {
      const platform = composeData.metadata?.platform?.toLowerCase().replace(' page', '') || 'facebook';
      const title = composeData.title || '';
      const content = composeData.content || '';

      let endpoint = '';
      let requestBody: any = {};

      switch (action) {
        case 'caption':
          endpoint = '/api/ai/caption';
          requestBody = {
            platform,
            title,
            content,
            tone: 'exciting',
            targetAudience: 'general'
          };
          break;

        case 'hashtags':
          endpoint = '/api/ai/hashtags';
          requestBody = {
            platform,
            title,
            content,
            count: 10
          };
          break;

        case 'script':
          endpoint = '/api/ai/script';
          requestBody = {
            platform,
            title,
            content,
            duration: composeData.metadata?.duration || 30,
            tone: 'engaging'
          };
          break;

        default:
          console.log(`AI action ${action} not implemented yet`);
          return;
      }

      const response = await fetch(endpoint, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestBody),
      });

      if (!response.ok) {
        const errorData = await response.json();
        
        if (response.status === 429) {
          // Handle rate limit error with specific message
          const rateLimitMessage = errorData.message || 'B·∫°n ƒë√£ h·∫øt s·ªë l·∫ßn s·ª≠ d·ª•ng AI. Vui l√≤ng n√¢ng c·∫•p t√†i kho·∫£n ho·∫∑c th·ª≠ l·∫°i sau.';
          showToast({
            message: rateLimitMessage,
            type: 'warning',
            title: 'ƒê√£ h·∫øt l∆∞·ª£t s·ª≠ d·ª•ng AI'
          });
          return;
        }
        
        throw new Error(errorData.error || 'Failed to generate content');
      }

      const data = await response.json();

      // Update content based on AI response
      if (action === 'caption' && data.caption) {
        onDataChange({
          ...composeData,
          content: data.caption
        });
        showToast({
          message: 'N·ªôi dung ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng b·∫±ng AI',
          type: 'success',
          title: 'T·∫°o n·ªôi dung th√†nh c√¥ng'
        });
      } else if (action === 'hashtags' && data.hashtags) {
        const hashtags = Array.isArray(data.hashtags) ? data.hashtags.join(' ') : data.hashtags;
        onDataChange({
          ...composeData,
          metadata: {
            platform: composeData.metadata?.platform || 'Facebook Page',
            ratio: composeData.metadata?.ratio || '1:1',
            ...composeData.metadata,
            hashtags
          }
        });
        showToast({
          message: 'Hashtags ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng b·∫±ng AI',
          type: 'success',
          title: 'T·∫°o hashtags th√†nh c√¥ng'
        });
      } else if (action === 'script' && data.script) {
        onDataChange({
          ...composeData,
          content: data.script
        });
        showToast({
          message: 'Script video ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng b·∫±ng AI',
          type: 'success',
          title: 'T·∫°o script th√†nh c√¥ng'
        });
      }

      // Log successful AI usage
      await activityLogger.logAIUsage(
        action, 
        platform, 
        true
      );

      // Reset loading state for successful action
      console.log('‚úÖ AI action completed successfully, resetting loading state for:', action);
      setAiLoading(prev => {
        const newState = { ...prev, [action]: false };
        console.log('üìä Final loading state:', newState);
        return newState;
      });

    } catch (error) {
      console.error('AI action error:', error);
      
      // Log failed AI usage
      await activityLogger.logAIUsage(
        action, 
        composeData.metadata?.platform || 'facebook', 
        false, 
        error instanceof Error ? error.message : 'Unknown error'
      );
      
      // Show user-friendly error message
      const errorMessage = error instanceof Error ? error.message : 'C√≥ l·ªói x·∫£y ra khi t·∫°o n·ªôi dung AI';
      showToast({
        message: errorMessage,
        type: 'error',
        title: 'L·ªói AI'
      });
    } finally {
      // Reset loading state for this action
      console.log('üîÑ Finally block: resetting loading state for:', action);
      setAiLoading(prev => {
        const newState = { ...prev, [action]: false };
        console.log('üìä Final cleanup state:', newState);
        return newState;
      });
    }
  };

  const handleTemplateSelect = async (template: typeof templates[0] | typeof videoTemplates[0]) => {
    setSelectedTemplate(template.id);
    
    if (activeTab === 'video') {
      const videoTemplate = template as typeof videoTemplates[0];
      onDataChange({
        ...composeData,
        content: videoTemplate.content,
        metadata: {
          type: 'video',
          platform: composeData.metadata?.platform || 'Facebook Page',
          ratio: videoTemplate.ratio,
          duration: videoTemplate.duration,
          hook: videoTemplate.hook,
          beats: videoTemplate.beats,
          ...composeData.metadata,
          template: template.id,
        }
      });
    } else {
      const socialTemplate = template as typeof templates[0];
      onDataChange({
        ...composeData,
        content: socialTemplate.content,
        metadata: {
          type: 'social',
          platform: composeData.metadata?.platform || 'Facebook Page',
          ratio: socialTemplate.ratio,
          ...composeData.metadata,
          template: template.id,
        }
      });
    }

    // Log template usage
    await activityLogger.logTemplateUsed(template, activeTab);
    
    // Show success toast
    showToast({
      message: `ƒê√£ √°p d·ª•ng template "${template.name}"`,
      type: 'success',
      title: '√Åp d·ª•ng template th√†nh c√¥ng'
    });
  };

  const handlePlatformChange = async (platform: string) => {
    const newData = {
      ...composeData,
      metadata: {
        ...composeData.metadata,
        platform,
        ratio: composeData.metadata?.ratio || '1:1',
      }
    };
    
    onDataChange(newData);

    // Log platform selection
    await activityLogger.logPlatformSelected(
      platform, 
      newData.metadata.ratio, 
      activeTab
    );
  };

  const handleRatioChange = async (ratio: string) => {
    const newData = {
      ...composeData,
      metadata: {
        ...composeData.metadata,
        platform: composeData.metadata?.platform || 'Facebook Page',
        ratio,
      }
    };
    
    onDataChange(newData);

    // Log platform/ratio selection
    await activityLogger.logPlatformSelected(
      newData.metadata.platform, 
      ratio, 
      activeTab
    );
  };

  const handleBrandColorChange = (color: string) => {
    onDataChange({
      ...composeData,
      metadata: {
        platform: composeData.metadata?.platform || 'Facebook Page',
        ratio: composeData.metadata?.ratio || '1:1',
        ...composeData.metadata,
        brandColor: color
      }
    });
  };

  return (
    <div className="bg-white rounded-lg shadow-sm border p-6 space-y-6">
      {/* Tab Selector */}
      <div className="flex bg-gray-100 rounded-lg p-1">
        <button
          onClick={() => onTabChange('social')}
          style={{
            backgroundColor: activeTab === 'social' ? '#dbeafe' : 'transparent',
            borderColor: activeTab === 'social' ? '#3b82f6' : 'transparent',
            color: activeTab === 'social' ? '#1e40af' : '#6b7280'
          }}
          className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-colors border-2 ${
            activeTab === 'social' ? 'shadow-sm' : 'hover:text-gray-900'
          }`}
        >
          üì± B√†i Vi·∫øt M·∫°ng X√£ H·ªôi
          {activeTab === 'social' && (
            <span className="ml-2 w-2 h-2 bg-blue-500 rounded-full inline-block"></span>
          )}
        </button>
        <button
          onClick={() => onTabChange('video')}
          style={{
            backgroundColor: activeTab === 'video' ? '#fef3c7' : 'transparent',
            borderColor: activeTab === 'video' ? '#f59e0b' : 'transparent',
            color: activeTab === 'video' ? '#92400e' : '#6b7280'
          }}
          className={`flex-1 py-2 px-4 rounded-md text-sm font-medium transition-colors border-2 ${
            activeTab === 'video' ? 'shadow-sm' : 'hover:text-gray-900'
          }`}
        >
          üé• Video/Reel
          {activeTab === 'video' && (
            <span className="ml-2 w-2 h-2 bg-amber-500 rounded-full inline-block"></span>
          )}
        </button>
      </div>

      {/* Platform Selection */}
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-3">
          N·ªÅn t·∫£ng
          {composeData.metadata?.platform && (
            <span className="ml-2 text-xs bg-blue-100 text-blue-700 px-2 py-1 rounded font-medium">
              ‚úì {composeData.metadata.platform}
            </span>
          )}
        </label>
        <div className="grid grid-cols-1 gap-2">
          {platforms.map((platform) => {
            const currentPlatform = composeData.metadata?.platform;
            const isSelected = currentPlatform === platform.label;
            const isDefaultSelected = !currentPlatform && platform.key === 'facebook';
            const shouldHighlight = isSelected || isDefaultSelected;
            
            return (
              <button
                key={platform.key}
                onClick={() => {
                  handlePlatformChange(platform.label);
                }}
                disabled={!platform.available}
                style={{
                  backgroundColor: shouldHighlight ? '#dbeafe' : 'white',
                  borderColor: shouldHighlight ? '#3b82f6' : '#d1d5db',
                  color: shouldHighlight ? '#1e40af' : '#374151'
                }}
                className={`p-3 rounded-lg border-2 text-left transition-colors flex items-center gap-3 cursor-pointer`}
              >
                <span className="text-lg">{platform.icon}</span>
                <div>
                  <div className="font-medium">{platform.label}</div>
                  {!platform.available && (
                    <div className="text-xs text-gray-400">Ch∆∞a kh·∫£ d·ª•ng</div>
                  )}
                </div>
                {shouldHighlight && (
                  <div className="ml-auto">
                    <div className="w-3 h-3 bg-blue-500 rounded-full"></div>
                  </div>
                )}
              </button>
            );
          })}
        </div>
      </div>

      {/* Aspect Ratio */}
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-3">
          T·ªâ l·ªá khung h√¨nh
          {composeData.metadata?.ratio && (
            <span className="ml-2 text-xs bg-green-100 text-green-700 px-2 py-1 rounded font-medium">
              ‚úì {composeData.metadata.ratio}
            </span>
          )}
        </label>
        <div className="grid grid-cols-2 gap-2">
          {(activeTab === 'video' ? videoRatios : ratios).map((ratio) => {
            const currentRatio = composeData.metadata?.ratio;
            const isSelected = currentRatio === ratio.key;
            const isDefaultSelected = !currentRatio && ratio.key === (activeTab === 'video' ? '9:16' : '1:1');
            const shouldHighlight = isSelected || isDefaultSelected;
            
            return (
              <button
                key={ratio.key}
                onClick={() => {
                  handleRatioChange(ratio.key);
                }}
                style={{
                  backgroundColor: shouldHighlight ? '#dcfce7' : 'white',
                  borderColor: shouldHighlight ? '#16a34a' : '#d1d5db',
                  color: shouldHighlight ? '#15803d' : '#374151'
                }}
                className={`relative p-3 rounded-lg border-2 text-left transition-colors cursor-pointer`}
              >
                <div className="font-medium text-sm">{ratio.label}</div>
                <div className="text-xs mt-1 opacity-70">{ratio.description}</div>
                {shouldHighlight && (
                  <div className="absolute top-2 right-2">
                    <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                  </div>
                )}
              </button>
            );
          })}
        </div>
      </div>

      {/* Video Duration Control - Only for Video tab */}
      {activeTab === 'video' && (
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-3">
            Th·ªùi l∆∞·ª£ng video
          </label>
          <div className="grid grid-cols-3 gap-2">
            {[15, 30, 60].map((duration) => (
              <button
                key={duration}
                onClick={() => {
                  onDataChange({
                    ...composeData,
                    metadata: {
                      platform: composeData.metadata?.platform || 'Facebook Page',
                      ratio: composeData.metadata?.ratio || '9:16',
                      ...composeData.metadata,
                      duration
                    }
                  });
                }}
                className={`p-2 rounded-lg border text-center transition-colors ${
                  composeData.metadata?.duration === duration
                    ? 'border-amber-500 bg-amber-50 text-amber-700'
                    : 'border-gray-200 hover:border-gray-300 hover:bg-gray-50'
                }`}
              >
                <div className="text-sm font-medium">{duration}s</div>
              </button>
            ))}
          </div>
        </div>
      )}

      {/* Brand Color */}
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-3">
          M√†u th∆∞∆°ng hi·ªáu
        </label>
        <div className="flex items-center gap-3">
          <input
            type="color"
            value={composeData.metadata?.brandColor || '#0ea5e9'}
            onChange={(e) => handleBrandColorChange(e.target.value)}
            className="w-12 h-12 rounded-lg border border-gray-300 cursor-pointer"
          />
          <div>
            <div className="text-sm font-medium">
              {composeData.metadata?.brandColor || '#0ea5e9'}
            </div>
            <div className="text-xs text-gray-500">
              M√†u ch·ªß ƒë·∫°o cho thi·∫øt k·∫ø
            </div>
          </div>
        </div>
      </div>

      {/* Templates */}
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-3">
          {activeTab === 'video' ? 'M·∫´u Video thi·∫øt k·∫ø s·∫µn' : 'M·∫´u thi·∫øt k·∫ø s·∫µn'}
        </label>
        <div className="space-y-2">
          {(activeTab === 'video' ? videoTemplates : templates).map((template) => (
            <button
              key={template.id}
              onClick={() => handleTemplateSelect(template)}
              className={`w-full p-3 rounded-lg border text-left transition-colors ${
                selectedTemplate === template.id
                  ? 'border-blue-500 bg-blue-50'
                  : 'border-gray-200 hover:border-gray-300 hover:bg-gray-50'
              }`}
            >
              <div className="flex items-center justify-between">
                <div>
                  <div className="font-medium text-sm">{template.name}</div>
                  <div className="text-xs text-gray-500 mt-1">{template.description}</div>
                  {activeTab === 'video' && 'duration' in template && (
                    <div className="text-xs text-amber-600 mt-1">
                      ‚è±Ô∏è {(template as any).duration}s ‚Ä¢ {(template as any).hook}
                    </div>
                  )}
                </div>
                <div className="text-xs px-2 py-1 bg-gray-100 rounded-full">
                  {template.ratio}
                </div>
              </div>
            </button>
          ))}
        </div>
      </div>

      {/* AI Tools */}
      <div className="border-t pt-6">
        <div className="flex items-center justify-between mb-3">
          <h3 className="text-sm font-medium text-gray-700">AI Assistant</h3>
          <div className="text-xs text-gray-500">
            {getAILimitMessage()}
          </div>
        </div>
        
        {!canUseAI() && (
          <div className="mb-3 p-3 bg-yellow-50 border border-yellow-200 rounded-lg">
            <div className="text-sm text-yellow-800">
              <span className="font-medium">üîí AI kh√¥ng kh·∫£ d·ª•ng</span>
              <div className="text-xs mt-1">
                {rateLimitData?.stats.userRole === 'free' 
                  ? 'N√¢ng c·∫•p l√™n Professional ƒë·ªÉ s·ª≠ d·ª•ng AI'
                  : 'B·∫°n ƒë√£ v∆∞·ª£t qu√° gi·ªõi h·∫°n s·ª≠ d·ª•ng AI h√¥m nay'
                }
              </div>
            </div>
          </div>
        )}
        
        <div className="space-y-2">
          {activeTab === 'video' ? (
            <>
              <button 
                onClick={() => handleAIAction('script')}
                disabled={!canUseAI() || aiLoading.script}
                className={`w-full p-3 border rounded-lg text-left transition-colors ${
                  canUseAI() && !aiLoading.script
                    ? 'border-gray-200 hover:bg-gray-50 cursor-pointer' 
                    : 'border-gray-100 bg-gray-50 cursor-not-allowed opacity-60'
                }`}>
                <div className="flex items-center gap-2">
                  <span>
                    {aiLoading.script ? (
                      <div className="animate-spin text-blue-500">‚è≥</div>
                    ) : canUseAI() ? (
                      'üé¨'
                    ) : (
                      'üîí'
                    )}
                  </span>
                  <div>
                    <div className="text-sm font-medium">
                      {aiLoading.script ? 'ƒêang t·∫°o script...' : 'T·∫°o script video'}
                    </div>
                    <div className="text-xs text-gray-500">AI vi·∫øt k·ªãch b·∫£n video</div>
                  </div>
                </div>
              </button>
              
              <button 
                onClick={() => handleAIAction('hook')}
                disabled={!canUseAI() || aiLoading.hook}
                className={`w-full p-3 border rounded-lg text-left transition-colors ${
                  canUseAI() && !aiLoading.hook
                    ? 'border-gray-200 hover:bg-gray-50 cursor-pointer' 
                    : 'border-gray-100 bg-gray-50 cursor-not-allowed opacity-60'
                }`}>
                <div className="flex items-center gap-2">
                  <span>
                    {aiLoading.hook ? (
                      <div className="animate-spin text-blue-500">‚è≥</div>
                    ) : canUseAI() ? (
                      'üéØ'
                    ) : (
                      'üîí'
                    )}
                  </span>
                  <div>
                    <div className="text-sm font-medium">
                      {aiLoading.hook ? 'ƒêang t·∫°o hook...' : 'G·ª£i √Ω hook'}
                    </div>
                    <div className="text-xs text-gray-500">C√¢u m·ªü ƒë·∫ßu thu h√∫t</div>
                  </div>
                </div>
              </button>

              <button 
                onClick={() => handleAIAction('timeline')}
                disabled={!canUseAI() || aiLoading.timeline}
                className={`w-full p-3 border rounded-lg text-left transition-colors ${
                  canUseAI() && !aiLoading.timeline
                    ? 'border-gray-200 hover:bg-gray-50 cursor-pointer' 
                    : 'border-gray-100 bg-gray-50 cursor-not-allowed opacity-60'
                }`}>
                <div className="flex items-center gap-2">
                  <span>
                    {aiLoading.timeline ? (
                      <div className="animate-spin text-blue-500">‚è≥</div>
                    ) : canUseAI() ? (
                      '‚è±Ô∏è'
                    ) : (
                      'üîí'
                    )}
                  </span>
                  <div>
                    <div className="text-sm font-medium">
                      {aiLoading.timeline ? 'ƒêang chia timeline...' : 'Chia timeline'}
                    </div>
                    <div className="text-xs text-gray-500">Ph√¢n chia th·ªùi gian video</div>
                  </div>
                </div>
              </button>
            </>
          ) : (
            <>
              <button 
                onClick={() => {
                  console.log('üî• BUTTON CLICKED!!! - AI Caption button');
                  console.log('üéØ AI Caption button clicked, current loading state:', aiLoading.caption);
                  console.log('üìä Can use AI:', canUseAI());
                  console.log('üîç AI rate limit data:', rateLimitData);
                  handleAIAction('caption');
                }}
                disabled={!canUseAI() || aiLoading.caption}
                className={`w-full p-3 border rounded-lg text-left transition-colors ${
                  canUseAI() && !aiLoading.caption
                    ? 'border-gray-200 hover:bg-gray-50 cursor-pointer' 
                    : 'border-gray-100 bg-gray-50 cursor-not-allowed opacity-60'
                }`}>
                <div className="flex items-center gap-2">
                  <span>
                    {aiLoading.caption ? (
                      <div className="animate-spin text-blue-500">‚è≥</div>
                    ) : canUseAI() ? (
                      'ü§ñ'
                    ) : (
                      'üîí'
                    )}
                  </span>
                  <div>
                    <div className="text-sm font-medium">
                      {aiLoading.caption ? 'ƒêang t·∫°o n·ªôi dung...' : 'T·∫°o n·ªôi dung'}
                    </div>
                    <div className="text-xs text-gray-500">AI vi·∫øt caption</div>
                  </div>
                  {/* Debug display */}
                  {process.env.NODE_ENV === 'development' && (
                    <div className="ml-auto text-xs text-red-500">
                      {aiLoading.caption ? 'LOADING' : 'READY'}
                    </div>
                  )}
                </div>
              </button>
              
              <button 
                onClick={() => handleAIAction('hashtags')}
                disabled={!canUseAI() || aiLoading.hashtags}
                className={`w-full p-3 border rounded-lg text-left transition-colors ${
                  canUseAI() && !aiLoading.hashtags
                    ? 'border-gray-200 hover:bg-gray-50 cursor-pointer' 
                    : 'border-gray-100 bg-gray-50 cursor-not-allowed opacity-60'
                }`}>
                <div className="flex items-center gap-2">
                  <span>
                    {aiLoading.hashtags ? (
                      <div className="animate-spin text-blue-500">‚è≥</div>
                    ) : canUseAI() ? (
                      '#Ô∏è‚É£'
                    ) : (
                      'üîí'
                    )}
                  </span>
                  <div>
                    <div className="text-sm font-medium">
                      {aiLoading.hashtags ? 'ƒêang t·∫°o hashtags...' : 'G·ª£i √Ω hashtag'}
                    </div>
                    <div className="text-xs text-gray-500">Auto hashtags</div>
                  </div>
                </div>
              </button>
            </>
          )}
        </div>
      </div>
    </div>
  );
}
