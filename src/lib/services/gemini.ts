import { GoogleGenerativeAI } from '@google/generative-ai';

// Initialize Gemini AI with API key
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY || '');

// Use Gemini 1.5 Flash-8B model for cost efficiency
const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash-8b' });

export interface GeminiConfig {
  temperature?: number;
  topP?: number;
  topK?: number;
  maxOutputTokens?: number;
}

const defaultConfig: GeminiConfig = {
  temperature: 0.7,
  topP: 0.8,
  topK: 40,
  maxOutputTokens: 1024,
};

/**
 * Generate content caption for social media posts
 */
export async function generateCaption(params: {
  platform: 'instagram' | 'facebook' | 'tiktok' | 'zalo';
  title: string;
  content?: string;
  tone?: 'professional' | 'casual' | 'exciting' | 'promotional';
  targetAudience?: string;
  productType?: string;
  config?: GeminiConfig;
}): Promise<string> {
  const { platform, title, content, tone = 'exciting', targetAudience, productType, config = defaultConfig } = params;
  
  const platformSpecs = {
    instagram: {
      maxLength: 2200,
      style: 'visual-focused, hashtag-friendly, emojis',
      format: 'Hook + description + call-to-action + hashtags'
    },
    facebook: {
      maxLength: 63206,
      style: 'conversational, engaging, community-focused',
      format: 'Story-telling approach with clear call-to-action'
    },
    tiktok: {
      maxLength: 300,
      style: 'trending, energetic, viral-potential',
      format: 'Short, catchy, with trending hashtags'
    },
    zalo: {
      maxLength: 1000,
      style: 'professional, informative, Vietnamese-focused',
      format: 'Clear message with business tone'
    }
  };

  const spec = platformSpecs[platform];
  
  const prompt = `
T·∫°o caption cho b√†i ƒëƒÉng ${platform.toUpperCase()} v·ªõi th√¥ng tin sau:

**Th√¥ng tin s·∫£n ph·∫©m/n·ªôi dung:**
- Ti√™u ƒë·ªÅ: ${title}
${content ? `- M√¥ t·∫£: ${content}` : ''}
${productType ? `- Lo·∫°i s·∫£n ph·∫©m: ${productType}` : ''}
${targetAudience ? `- ƒê·ªëi t∆∞·ª£ng kh√°ch h√†ng: ${targetAudience}` : ''}

**Y√™u c·∫ßu cho ${platform}:**
- ƒê·ªô d√†i t·ªëi ƒëa: ${spec.maxLength} k√Ω t·ª±
- Phong c√°ch: ${spec.style}
- ƒê·ªãnh d·∫°ng: ${spec.format}
- Tone: ${tone}
- S·ª≠ d·ª•ng ti·∫øng Vi·ªát
- Ph√π h·ª£p v·ªõi th·ªã tr∆∞·ªùng Vi·ªát Nam

**L∆∞u √Ω ƒë·∫∑c bi·ªát:**
- T·∫°o n·ªôi dung h·∫•p d·∫´n, d·ªÖ ƒë·ªçc
- S·ª≠ d·ª•ng emoji ph√π h·ª£p
- C√≥ call-to-action r√µ r√†ng
- Hashtags trending v√† ph√π h·ª£p

Tr·∫£ v·ªÅ ch·ªâ n·ªôi dung caption, kh√¥ng c√≥ gi·∫£i th√≠ch th√™m.
`;

  try {
    const result = await model.generateContent({
      contents: [{ role: 'user', parts: [{ text: prompt }] }],
      generationConfig: config,
    });

    const response = await result.response;
    const text = response.text();
    
    return text.trim();
  } catch (error) {
    console.error('Gemini caption generation error:', error);
    throw new Error('Kh√¥ng th·ªÉ t·∫°o caption. Vui l√≤ng th·ª≠ l·∫°i.');
  }
}

/**
 * Generate hashtags for social media posts
 */
export async function generateHashtags(params: {
  platform: 'instagram' | 'facebook' | 'tiktok' | 'zalo';
  title: string;
  content?: string;
  productType?: string;
  targetAudience?: string;
  count?: number;
  config?: GeminiConfig;
}): Promise<string[]> {
  const { platform, title, content, productType, targetAudience, count = 10, config = defaultConfig } = params;

  const prompt = `
T·∫°o ${count} hashtags ph√π h·ª£p cho b√†i ƒëƒÉng ${platform.toUpperCase()} v·ªõi th√¥ng tin:

**N·ªôi dung:**
- Ti√™u ƒë·ªÅ: ${title}
${content ? `- M√¥ t·∫£: ${content}` : ''}
${productType ? `- Lo·∫°i s·∫£n ph·∫©m: ${productType}` : ''}
${targetAudience ? `- ƒê·ªëi t∆∞·ª£ng: ${targetAudience}` : ''}

**Y√™u c·∫ßu:**
- ${count} hashtags ph√π h·ª£p nh·∫•t
- K·∫øt h·ª£p hashtags trending v√† niche
- Ph√π h·ª£p v·ªõi th·ªã tr∆∞·ªùng Vi·ªát Nam
- Bao g·ªìm c·∫£ ti·∫øng Vi·ªát v√† ti·∫øng Anh
- T·ªëi ∆∞u cho ${platform}

**ƒê·ªãnh d·∫°ng tr·∫£ v·ªÅ:**
Tr·∫£ v·ªÅ danh s√°ch hashtags, m·ªói hashtag m·ªôt d√≤ng, b·∫Øt ƒë·∫ßu b·∫±ng #

V√≠ d·ª•:
#sale
#deal
#vietnam
`;

  try {
    const result = await model.generateContent({
      contents: [{ role: 'user', parts: [{ text: prompt }] }],
      generationConfig: config,
    });

    const response = await result.response;
    const text = response.text();
    
    // Parse hashtags from response
    const hashtags = text
      .split('\n')
      .filter((line: string) => line.trim().startsWith('#'))
      .map((line: string) => line.trim())
      .slice(0, count);
    
    return hashtags;
  } catch (error) {
    console.error('Gemini hashtags generation error:', error);
    throw new Error('Kh√¥ng th·ªÉ t·∫°o hashtags. Vui l√≤ng th·ª≠ l·∫°i.');
  }
}

/**
 * Generate video script for TikTok/YouTube Shorts
 */
export async function generateVideoScript(params: {
  platform: 'tiktok' | 'youtube' | 'instagram';
  duration: number; // seconds
  title: string;
  content?: string;
  style?: 'educational' | 'entertainment' | 'promotional' | 'storytelling';
  config?: GeminiConfig;
}): Promise<{
  hook: string;
  beats: { time: number; text: string; action?: string }[];
  cta: string;
}> {
  const { platform, duration, title, content, style = 'promotional', config = defaultConfig } = params;

  const prompt = `
T·∫°o script video ${duration} gi√¢y cho ${platform.toUpperCase()} v·ªõi th√¥ng tin:

**Th√¥ng tin video:**
- Ti√™u ƒë·ªÅ: ${title}
${content ? `- N·ªôi dung: ${content}` : ''}
- Th·ªùi l∆∞·ª£ng: ${duration} gi√¢y
- Phong c√°ch: ${style}
- Platform: ${platform}

**Y√™u c·∫ßu c·∫•u tr√∫c script:**
1. Hook (0-3s): C√¢u m·ªü ƒë·∫ßu h·∫•p d·∫´n, g√¢y t√≤ m√≤
2. Beats: Chia nh·ªè th√†nh c√°c ƒëo·∫°n theo th·ªùi gian
3. CTA: Call-to-action cu·ªëi video

**ƒê·ªãnh d·∫°ng tr·∫£ v·ªÅ JSON:**
{
  "hook": "C√¢u hook h·∫•p d·∫´n",
  "beats": [
    {"time": 0, "text": "N·ªôi dung ƒëo·∫°n 1", "action": "H√†nh ƒë·ªông camera/edit"},
    {"time": 3, "text": "N·ªôi dung ƒëo·∫°n 2", "action": "H√†nh ƒë·ªông camera/edit"},
    ...
  ],
  "cta": "Call-to-action cu·ªëi video"
}

**L∆∞u √Ω:**
- Ph√π h·ª£p v·ªõi th·ªã tr∆∞·ªùng Vi·ªát Nam
- Ng√¥n ng·ªØ tr·∫ª trung, d·ªÖ hi·ªÉu
- T·∫°o ƒëi·ªÉm nh·∫•n ·ªü gi√¢y ƒë·∫ßu ti√™n
- CTA r√µ r√†ng, th√∫c ƒë·∫©y h√†nh ƒë·ªông
`;

  try {
    const result = await model.generateContent({
      contents: [{ role: 'user', parts: [{ text: prompt }] }],
      generationConfig: config,
    });

    const response = await result.response;
    const text = response.text();
    
    // Parse JSON response
    const jsonMatch = text.match(/\{[\s\S]*\}/);
    if (!jsonMatch) {
      throw new Error('Invalid JSON response from Gemini');
    }
    
    const scriptData = JSON.parse(jsonMatch[0]);
    return scriptData;
  } catch (error) {
    console.error('Gemini script generation error:', error);
    throw new Error('Kh√¥ng th·ªÉ t·∫°o script video. Vui l√≤ng th·ª≠ l·∫°i.');
  }
}

/**
 * Suggest optimal posting times based on content and audience
 */
export async function suggestOptimalTimes(params: {
  platform: string[];
  contentType: 'promotional' | 'educational' | 'entertainment' | 'news';
  targetAudience: 'teens' | 'adults' | 'professionals' | 'general';
  timezone?: string;
  config?: GeminiConfig;
}): Promise<{
  suggestions: {
    platform: string;
    times: string[];
    reasoning: string;
  }[];
}> {
  const { platform, contentType, targetAudience, timezone = 'Asia/Ho_Chi_Minh', config = defaultConfig } = params;

  const prompt = `
G·ª£i √Ω th·ªùi gian ƒëƒÉng b√†i t·ªëi ∆∞u cho c√°c platform social media v·ªõi th√¥ng tin:

**Th√¥ng tin:**
- Platforms: ${platform.join(', ')}
- Lo·∫°i n·ªôi dung: ${contentType}
- ƒê·ªëi t∆∞·ª£ng: ${targetAudience}
- M√∫i gi·ªù: ${timezone}

**Y√™u c·∫ßu:**
- D·ª±a tr√™n th√≥i quen s·ª≠ d·ª•ng social media c·ªßa ng∆∞·ªùi Vi·ªát Nam
- Xem x√©t ƒë·∫∑c ƒëi·ªÉm t·ª´ng platform
- Ph√¢n t√≠ch theo nh√≥m ƒë·ªëi t∆∞·ª£ng
- ƒê∆∞a ra 3-5 khung gi·ªù t·ªët nh·∫•t cho m·ªói platform

**ƒê·ªãnh d·∫°ng tr·∫£ v·ªÅ JSON:**
{
  "suggestions": [
    {
      "platform": "instagram",
      "times": ["09:00", "13:00", "19:00"],
      "reasoning": "L√Ω do t·∫°i sao ch·ªçn nh·ªØng khung gi·ªù n√†y"
    }
  ]
}

L∆∞u √Ω: S·ª≠ d·ª•ng ƒë·ªãnh d·∫°ng 24h (HH:MM) cho th·ªùi gian.
`;

  try {
    console.log('üîÑ Sending optimal times request to Gemini...');
    
    const result = await model.generateContent({
      contents: [{ role: 'user', parts: [{ text: prompt }] }],
      generationConfig: config,
    });

    const response = await result.response;
    const text = response.text();
    
    console.log('üìù Gemini optimal times raw response:', text);
    
    // Parse JSON response
    const jsonMatch = text.match(/\{[\s\S]*\}/);
    if (!jsonMatch) {
      console.error('‚ùå No JSON found in response:', text);
      throw new Error('Invalid JSON response from Gemini');
    }
    
    console.log('üîç Extracted JSON:', jsonMatch[0]);
    
    const suggestions = JSON.parse(jsonMatch[0]);
    console.log('‚úÖ Parsed suggestions:', suggestions);
    
    return suggestions;
  } catch (error) {
    console.error('‚ùå Gemini optimal times suggestion error:', error);
    console.error('‚ùå Error details:', {
      message: error instanceof Error ? error.message : 'Unknown error',
      stack: error instanceof Error ? error.stack : undefined,
      type: typeof error,
      error
    });
    throw new Error('Kh√¥ng th·ªÉ g·ª£i √Ω th·ªùi gian t·ªëi ∆∞u. Vui l√≤ng th·ª≠ l·∫°i.');
  }
}

/**
 * Health check for Gemini service
 */
export async function healthCheck(): Promise<boolean> {
  try {
    const result = await model.generateContent({
      contents: [{ role: 'user', parts: [{ text: 'Hello' }] }],
      generationConfig: { maxOutputTokens: 10 },
    });
    
    await result.response;
    return true;
  } catch (error) {
    console.error('Gemini health check failed:', error);
    return false;
  }
}
