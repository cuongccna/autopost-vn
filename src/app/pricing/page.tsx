'use client';

import Link from 'next/link'
import { useState } from 'react';
import PaymentModal from '@/components/modals/PaymentModal';
import { showToast } from '@/lib/utils/toast';

export default function PricingPage() {
  const [paymentModal, setPaymentModal] = useState<{
    isOpen: boolean;
    plan: { name: string; price: string; type: 'professional' | 'enterprise' } | null;
  }>({
    isOpen: false,
    plan: null
  });

  const handleUpgradeClick = (planType: 'professional' | 'enterprise', planName: string, planPrice: string) => {
    setPaymentModal({
      isOpen: true,
      plan: { name: planName, price: planPrice, type: planType }
    });
  };

  const handleRequestUpgrade = async (planType: 'professional' | 'enterprise') => {
    try {
      const response = await fetch('/api/upgrade-request', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ targetPlan: planType })
      });

      const data = await response.json();

      if (!response.ok) {
        // Show user-friendly error messages
        if (response.status === 401) {
          showToast.error('Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ n√¢ng c·∫•p t√†i kho·∫£n');
          // Redirect to login after 2 seconds
          setTimeout(() => {
            window.location.href = '/app';
          }, 2000);
        } else if (response.status === 404) {
          showToast.error('Kh√¥ng t√¨m th·∫•y th√¥ng tin t√†i kho·∫£n. Vui l√≤ng li√™n h·ªá admin.');
        } else if (data.error?.includes('already on this plan')) {
          showToast.warning('B·∫°n ƒë√£ s·ªü h·ªØu g√≥i n√†y ho·∫∑c cao h∆°n r·ªìi!');
        } else {
          showToast.error(data.error || 'G·ª≠i y√™u c·∫ßu th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.');
        }
        throw new Error(data.error || 'Upgrade request failed');
      }

      return data;
    } catch (error: any) {
      console.error('Upgrade request error:', error);
      throw error;
    }
  };

  const plans = [
    {
      name: 'Starter',
      price: 'Mi·ªÖn ph√≠',
      period: 'M√£i m√£i',
      description: 'Ph√π h·ª£p cho c√° nh√¢n v√† startup',
      popular: false,
      features: [
        '3 t√†i kho·∫£n social media',
        '10 b√†i ƒëƒÉng/th√°ng',
        'L√™n l·ªãch c∆° b·∫£n',
        'Template c√≥ s·∫µn',
        'H·ªó tr·ª£ email',
        'Analytics c∆° b·∫£n'
      ],
      limitations: [
        'Kh√¥ng c√≥ AI Content Generator',
        'Kh√¥ng c√≥ b√°o c√°o n√¢ng cao',
        'Kh√¥ng c√≥ API access'
      ],
      cta: 'B·∫Øt ƒë·∫ßu mi·ªÖn ph√≠',
      ctaLink: '/app',
      planType: 'free'
    },
    {
      name: 'Professional',
      price: '299,000ƒë',
      period: '/th√°ng',
      description: 'L·ª±a ch·ªçn t·ªët nh·∫•t cho doanh nghi·ªáp',
      popular: true,
      features: [
        '15 t√†i kho·∫£n social media',
        'Kh√¥ng gi·ªõi h·∫°n b√†i ƒëƒÉng',
        'AI Content Generator (Gemini)',
        'L√™n l·ªãch th√¥ng minh v·ªõi AI',
        'Template premium',
        'Analytics n√¢ng cao',
        'B√°o c√°o PDF export',
        'H·ªó tr·ª£ 24/7',
        'Team collaboration (5 users)',
        'API access',
        'Custom branding'
      ],
      limitations: [],
      cta: 'Ch·ªçn Professional',
      ctaLink: '#upgrade',
      planType: 'professional'
    },
    {
      name: 'Enterprise',
      price: '999,000ƒë',
      period: '/th√°ng',
      description: 'Gi·∫£i ph√°p to√†n di·ªán cho t·∫≠p ƒëo√†n',
      popular: false,
      features: [
        'Kh√¥ng gi·ªõi h·∫°n t√†i kho·∫£n',
        'Kh√¥ng gi·ªõi h·∫°n b√†i ƒëƒÉng',
        'AI Content Generator Premium',
        'White-label solution',
        'Custom integrations',
        'Dedicated account manager',
        'Advanced security',
        'Custom analytics dashboard',
        'Unlimited team members',
        'Priority support',
        'On-premise deployment',
        'Training & consulting'
      ],
      limitations: [],
      cta: 'Li√™n h·ªá t∆∞ v·∫•n',
      ctaLink: '#upgrade',
      planType: 'enterprise'
    }
  ]

  const faqs = [
    {
      question: 'C√≥ th·ªÉ thay ƒë·ªïi g√≥i d·ªãch v·ª• b·∫•t c·ª© l√∫c n√†o kh√¥ng?',
      answer: 'C√≥, b·∫°n c√≥ th·ªÉ n√¢ng c·∫•p ho·∫∑c h·∫° c·∫•p g√≥i d·ªãch v·ª• b·∫•t c·ª© l√∫c n√†o. Ph√≠ s·∫Ω ƒë∆∞·ª£c t√≠nh theo t·ª∑ l·ªá th·ªùi gian s·ª≠ d·ª•ng.'
    },
    {
      question: 'AI Content Generator ho·∫°t ƒë·ªông nh∆∞ th·∫ø n√†o?',
      answer: 'Ch√∫ng t√¥i s·ª≠ d·ª•ng Google Gemini AI ƒë·ªÉ t·∫°o n·ªôi dung, caption, hashtags ph√π h·ª£p v·ªõi t·ª´ng platform v√† ng√†nh ngh·ªÅ c·ªßa b·∫°n.'
    },
    {
      question: 'C√≥ h·ªó tr·ª£ kh√°ch h√†ng b·∫±ng ti·∫øng Vi·ªát kh√¥ng?',
      answer: 'C√≥, team support c·ªßa ch√∫ng t√¥i ho√†n to√†n b·∫±ng ti·∫øng Vi·ªát v√† hi·ªÉu r√µ th·ªã tr∆∞·ªùng Vi·ªát Nam.'
    },
    {
      question: 'D·ªØ li·ªáu c√≥ ƒë∆∞·ª£c b·∫£o m·∫≠t an to√†n kh√¥ng?',
      answer: 'Tuy·ªát ƒë·ªëi. Ch√∫ng t√¥i s·ª≠ d·ª•ng m√£ h√≥a end-to-end, tu√¢n th·ªß GDPR v√† c√≥ c√°c bi·ªán ph√°p b·∫£o m·∫≠t h√†ng ƒë·∫ßu.'
    }
  ]

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50">
      {/* Header */}
      <header className="sticky top-0 z-50 bg-white/80 backdrop-blur-md border-b border-gray-200">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <Link href="/" className="text-2xl font-bold text-blue-600">
              AutoPost VN
            </Link>
            <nav className="hidden md:flex space-x-8">
              <Link href="/features" className="text-gray-600 hover:text-blue-600">T√≠nh nƒÉng</Link>
              <Link href="/pricing" className="text-blue-600 font-medium border-b-2 border-blue-600">B·∫£ng gi√°</Link>
              <Link href="/support" className="text-gray-600 hover:text-blue-600">Tr·ª£ gi√∫p</Link>
              <Link href="/app" className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700">ƒêƒÉng nh·∫≠p</Link>
            </nav>
          </div>
        </div>
      </header>

      {/* Hero Section */}
      <section className="py-20 px-4 sm:px-6 lg:px-8">
        <div className="max-w-4xl mx-auto text-center">
          <h1 className="text-5xl font-bold text-gray-900 mb-6">
            L·ª±a ch·ªçn g√≥i ph√π h·ª£p 
            <span className="text-transparent bg-clip-text bg-gradient-to-r from-blue-600 to-purple-600">
              {" "}v·ªõi b·∫°n
            </span>
          </h1>
          <p className="text-xl text-gray-600 mb-8">
            T·ª´ mi·ªÖn ph√≠ ƒë·∫øn enterprise, ch√∫ng t√¥i c√≥ gi·∫£i ph√°p cho m·ªçi quy m√¥ doanh nghi·ªáp
          </p>
          <div className="bg-blue-100 text-blue-800 px-4 py-2 rounded-full inline-block mb-8">
            üí∞ Ti·∫øt ki·ªám 20% khi thanh to√°n theo nƒÉm
          </div>
        </div>
      </section>

      {/* Pricing Cards */}
      <section className="py-16 px-4 sm:px-6 lg:px-8">
        <div className="max-w-7xl mx-auto">
          <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
            {plans.map((plan, index) => (
              <div 
                key={index}
                className={`relative p-8 rounded-2xl border transition-all duration-300 hover:shadow-xl hover:-translate-y-2 ${
                  plan.popular 
                    ? 'bg-gradient-to-br from-blue-600 to-purple-600 text-white border-transparent shadow-2xl scale-105' 
                    : 'bg-white border-gray-200'
                }`}
              >
                {plan.popular && (
                  <div className="absolute -top-4 left-1/2 transform -translate-x-1/2">
                    <div className="bg-yellow-400 text-yellow-900 px-4 py-1 rounded-full text-sm font-semibold">
                      üî• Ph·ªï bi·∫øn nh·∫•t
                    </div>
                  </div>
                )}
                
                <div className="text-center mb-8">
                  <h3 className={`text-2xl font-bold mb-2 ${plan.popular ? 'text-white' : 'text-gray-900'}`}>
                    {plan.name}
                  </h3>
                  <p className={`mb-4 ${plan.popular ? 'text-blue-100' : 'text-gray-600'}`}>
                    {plan.description}
                  </p>
                  <div className="mb-4">
                    <span className={`text-4xl font-bold ${plan.popular ? 'text-white' : 'text-gray-900'}`}>
                      {plan.price}
                    </span>
                    <span className={`text-lg ${plan.popular ? 'text-blue-100' : 'text-gray-600'}`}>
                      {plan.period}
                    </span>
                  </div>
                </div>

                <div className="space-y-4 mb-8">
                  {plan.features.map((feature, featureIndex) => (
                    <div key={featureIndex} className="flex items-center">
                      <span className={`text-green-500 mr-3 ${plan.popular ? 'text-green-300' : ''}`}>‚úì</span>
                      <span className={`${plan.popular ? 'text-white' : 'text-gray-700'}`}>
                        {feature}
                      </span>
                    </div>
                  ))}
                  {plan.limitations.map((limitation, limitIndex) => (
                    <div key={limitIndex} className="flex items-center">
                      <span className="text-gray-400 mr-3">‚úó</span>
                      <span className="text-gray-500 text-sm">
                        {limitation}
                      </span>
                    </div>
                  ))}
                </div>

                {plan.planType === 'free' ? (
                  <Link 
                    href={plan.ctaLink}
                    className={`block w-full text-center py-3 px-6 rounded-lg font-semibold transition-all duration-300 ${
                      plan.popular
                        ? 'bg-white text-blue-600 hover:bg-gray-100'
                        : 'bg-blue-600 text-white hover:bg-blue-700'
                    }`}
                  >
                    {plan.cta}
                  </Link>
                ) : (
                  <button 
                    onClick={() => handleUpgradeClick(plan.planType as 'professional' | 'enterprise', plan.name, plan.price)}
                    className={`block w-full text-center py-3 px-6 rounded-lg font-semibold transition-all duration-300 ${
                      plan.popular
                        ? 'bg-white text-blue-600 hover:bg-gray-100'
                        : 'bg-blue-600 text-white hover:bg-blue-700'
                    }`}
                  >
                    {plan.cta}
                  </button>
                )}
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* Features Comparison */}
      <section className="py-16 px-4 sm:px-6 lg:px-8 bg-white">
        <div className="max-w-7xl mx-auto">
          <h2 className="text-3xl font-bold text-center text-gray-900 mb-12">
            So s√°nh chi ti·∫øt c√°c g√≥i d·ªãch v·ª•
          </h2>
          
          <div className="overflow-x-auto">
            <table className="w-full border-collapse">
              <thead>
                <tr className="border-b-2 border-gray-200">
                  <th className="text-left py-4 px-6 font-semibold text-gray-900">T√≠nh nƒÉng</th>
                  <th className="text-center py-4 px-6 font-semibold text-gray-900">Starter</th>
                  <th className="text-center py-4 px-6 font-semibold text-blue-600 bg-blue-50">Professional</th>
                  <th className="text-center py-4 px-6 font-semibold text-gray-900">Enterprise</th>
                </tr>
              </thead>
              <tbody>
                <tr className="border-b border-gray-100">
                  <td className="py-4 px-6">S·ªë t√†i kho·∫£n social media</td>
                  <td className="text-center py-4 px-6">3</td>
                  <td className="text-center py-4 px-6 bg-blue-50">15</td>
                  <td className="text-center py-4 px-6">Kh√¥ng gi·ªõi h·∫°n</td>
                </tr>
                <tr className="border-b border-gray-100">
                  <td className="py-4 px-6">S·ªë b√†i ƒëƒÉng/th√°ng</td>
                  <td className="text-center py-4 px-6">10</td>
                  <td className="text-center py-4 px-6 bg-blue-50">Kh√¥ng gi·ªõi h·∫°n</td>
                  <td className="text-center py-4 px-6">Kh√¥ng gi·ªõi h·∫°n</td>
                </tr>
                <tr className="border-b border-gray-100">
                  <td className="py-4 px-6">AI Content Generator</td>
                  <td className="text-center py-4 px-6">‚úó</td>
                  <td className="text-center py-4 px-6 bg-blue-50">‚úì</td>
                  <td className="text-center py-4 px-6">‚úì Premium</td>
                </tr>
                <tr className="border-b border-gray-100">
                  <td className="py-4 px-6">Team collaboration</td>
                  <td className="text-center py-4 px-6">‚úó</td>
                  <td className="text-center py-4 px-6 bg-blue-50">5 users</td>
                  <td className="text-center py-4 px-6">Kh√¥ng gi·ªõi h·∫°n</td>
                </tr>
                <tr className="border-b border-gray-100">
                  <td className="py-4 px-6">API Access</td>
                  <td className="text-center py-4 px-6">‚úó</td>
                  <td className="text-center py-4 px-6 bg-blue-50">‚úì</td>
                  <td className="text-center py-4 px-6">‚úì Advanced</td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
      </section>

      {/* FAQ Section */}
      <section className="py-16 px-4 sm:px-6 lg:px-8">
        <div className="max-w-4xl mx-auto">
          <h2 className="text-3xl font-bold text-center text-gray-900 mb-12">
            C√¢u h·ªèi th∆∞·ªùng g·∫∑p
          </h2>
          <div className="space-y-6">
            {faqs.map((faq, index) => (
              <div key={index} className="bg-white p-6 rounded-lg border border-gray-200">
                <h3 className="text-lg font-semibold text-gray-900 mb-3">
                  {faq.question}
                </h3>
                <p className="text-gray-600">
                  {faq.answer}
                </p>
              </div>
            ))}
          </div>
        </div>
      </section>

      {/* CTA Section */}
      <section className="py-20 px-4 sm:px-6 lg:px-8 bg-gradient-to-r from-blue-600 to-purple-600">
        <div className="max-w-4xl mx-auto text-center">
          <h2 className="text-3xl font-bold text-white mb-6">
            B·∫Øt ƒë·∫ßu t·ª± ƒë·ªông h√≥a marketing ngay h√¥m nay
          </h2>
          <p className="text-blue-100 text-lg mb-8">
            D√πng th·ª≠ mi·ªÖn ph√≠ 14 ng√†y, kh√¥ng c·∫ßn th·∫ª t√≠n d·ª•ng
          </p>
          <div className="flex flex-col sm:flex-row gap-4 justify-center">
            <Link href="/app" className="bg-white text-blue-600 px-8 py-3 rounded-lg hover:bg-gray-100 font-medium">
              D√πng th·ª≠ mi·ªÖn ph√≠
            </Link>
            <Link href="/support" className="border border-white text-white px-8 py-3 rounded-lg hover:bg-white/10 font-medium">
              Li√™n h·ªá t∆∞ v·∫•n
            </Link>
          </div>
        </div>
      </section>

      {/* Payment Modal */}
      {paymentModal.plan && (
        <PaymentModal
          isOpen={paymentModal.isOpen}
          onClose={() => setPaymentModal({ isOpen: false, plan: null })}
          plan={paymentModal.plan}
          onRequestUpgrade={handleRequestUpgrade}
        />
      )}
    </div>
  )
}
